name: Firebase Distribution # The name of the GitHub Actions workflow

on:
  push:
    branches: [ master ] # This workflow runs when there is a push to the "master" branch

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest # Specifies the type of machine to run the workflow on (Ubuntu latest version)

    steps:
      # Step 1: Checkout the code from the repository
      - uses: actions/checkout@v4

      # Step 2: Setup Java (Temurin JDK 17)
      - uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      # Step 3: Cache Gradle files to speed up future builds
      - name: Cache Gradle and wrapper
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches # Cache for Gradle dependencies
            ~/.gradle/wrapper # Cache for the Gradle wrapper
          key: cache-${{ runner.os }}-${{ matrix.jdk }}-gradle-${{ hashFiles('**/*.gradle*') }} # Unique cache key based on OS, JDK, and Gradle files
          restore-keys: |
            ${{ runner.os }}-gradle- # Fallback cache key if the specific key is unavailable

      # Step 4: Assemble the APK to ensure it's built
      - name: Assemble Debug APK
        run: ./gradlew assembleDebug --stacktrace # Assembles the debug APK

      # Step 5: Check if APK exists
      - name: Check if APK exists
        run: ls -la app/build/outputs/apk/debug/  # Lists the APK file to confirm it's generated

      # Step 6: Upload APK to Firebase App Distribution
      - name: Upload APK to Firebase App Distribution
        uses: wzieba/Firebase-Distribution-Github-Action@v1
        with:
          appId: ${{ secrets.FIREBASE_APP_ID }} # Firebase app ID, stored securely as a secret
          serviceCredentialsFileContent: ${{ secrets.CREDENTIAL_FILE_CONTENT }} # Firebase service credentials
          groups: "testers" # Firebase distribution group
          file: "app/build/outputs/apk/debug/app-debug.apk" # Path to the generated debug APK

